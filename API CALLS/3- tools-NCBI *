import requests
import urllib.parse
import json

class ESearchAgent:
    def __init__(self, base_url="https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"):
        self.base_url = base_url

    def build_query(self, db, term, **kwargs):
        """
        Construye la URL de la consulta ESearch.
        """
        params = {
            "db": db,
            "term": term,
            "retmode": kwargs.get("retmode", "json"),
            "retmax": kwargs.get("retmax", 20),
            "retstart": kwargs.get("retstart", 0),
            "usehistory": kwargs.get("usehistory", "y"),
            "sort": kwargs.get("sort"),
            "datetype": kwargs.get("datetype"),
            "reldate": kwargs.get("reldate"),
            "mindate": kwargs.get("mindate"),
            "maxdate": kwargs.get("maxdate"),
            "field": kwargs.get("field"),
            "WebEnv": kwargs.get("WebEnv"),
            "query_key": kwargs.get("query_key"),
            "rettype": kwargs.get("rettype"),
            "idtype": kwargs.get("idtype")
        }

        clean_params = {k: v for k, v in params.items() if v is not None}
        return self.base_url, clean_params

    def search(self, db, term, **kwargs):
        """
        Realiza la consulta a ESearch y devuelve los resultados.
        """
        url, params = self.build_query(db, term, **kwargs)
        encoded_params = urllib.parse.urlencode(params)
        full_url = f"{url}?{encoded_params}"

        try:
            response = requests.get(full_url)
            response.raise_for_status()

            if params.get("retmode", "json") == "json":
                data = response.json()
                if "esearchresult" not in data:
                    raise ValueError("La respuesta JSON no contiene 'esearchresult'.")
                return data
            else:
                return response.text

        except requests.exceptions.RequestException as e:
            raise Exception(f"Error en la petici√≥n ESearch: {e}")
        except json.JSONDecodeError:
            raise Exception("Error al decodificar la respuesta JSON.")
        except ValueError as e:
            raise Exception(f"Error en la estructura de la respuesta: {e}")

class ESummaryAgent:
    def __init__(self, base_url="https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi"):
        self.base_url = base_url

    def get_summary(self, db, ids=None, query_key=None, WebEnv=None, **kwargs):
        """
        Obtiene los res√∫menes de los documentos (DocSums) para los UIDs dados.
        """
        params = {
            "db": db,
            "id": ",".join(ids) if ids else None,
            "query_key": query_key,
            "WebEnv": WebEnv,
            "retmode": kwargs.get("retmode", "json"),
            "retstart": kwargs.get("retstart"),
            "retmax": kwargs.get("retmax"),
            "version": kwargs.get("version")
        }

        clean_params = {k: v for k, v in params.items() if v is not None}
        encoded_params = urllib.parse.urlencode(clean_params)
        full_url = f"{self.base_url}?{encoded_params}"

        try:
            response = requests.get(full_url)
            response.raise_for_status()

            if params.get("retmode", "json") == "json":
                return response.json()
            else:
                return response.text

        except requests.exceptions.RequestException as e:
            raise Exception(f"Error en la petici√≥n ESummary: {e}")
        except json.JSONDecodeError:
            raise Exception("Error al decodificar la respuesta JSON.")

def print_summary(summary_results):
    if "result" in summary_results:
        print("\nRes√∫menes de los documentos:")
        for uid, summary in summary_results["result"].items():
            if uid != "uids":
                print(f"\nUID: {uid}")
                print(f"T√≠tulo: {summary.get('title', 'N/A')}")
                if 'authors' in summary:
                    print(f"Primer Autor: {summary['authors'][0]['name']}")
                    print(f"√öltimo Autor: {summary['authors'][-1]['name']}")
                print(f"DOI: {summary.get('elocationid', 'N/A')}")
                print(f"Fecha: {summary.get('pubdate', 'N/A')}")
                print(f"Revista: {summary.get('source', 'N/A')}")
    else:
        print("No se pudieron obtener los res√∫menes.")

def get_database_list():
    """Obtiene y devuelve la lista de bases de datos disponibles en Entrez."""
    base_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi"
    params = {"retmode": "json"}
    encoded_params = urllib.parse.urlencode(params)
    full_url = f"{base_url}?{encoded_params}"

    try:
        response = requests.get(full_url)
        response.raise_for_status()
        data = response.json()
        if "einforesult" in data and "dblist" in data["einforesult"]:
            return data["einforesult"]["dblist"]
        else:
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error al obtener la lista de bases de datos: {e}")
        return None
    except json.JSONDecodeError:
        print("Error al decodificar la respuesta JSON.")
        return None

if __name__ == "__main__":
    esearch_agent = ESearchAgent()
    esummary_agent = ESummaryAgent()

    # Obtener y mostrar la lista de bases de datos disponibles antes de la interacci√≥n con el usuario
    databases = get_database_list()
    if databases:
        print("Bases de datos disponibles:")
        for db in databases:
            print(f"- {db}")
    else:
        print("No se pudo obtener la lista de bases de datos.")

    db = input("Ingrese la base de datos (por ejemplo, pubmed, protein, nuccore, etc.): ")
    term = input("Ingrese el t√©rmino de b√∫squeda: ")

    kwargs = {}
    reldate = input("Ingrese la cantidad de d√≠as para filtrar por fecha (opcional, presione Enter para omitir): ")
    if reldate:
        kwargs["reldate"] = reldate
        kwargs["datetype"] = input("Ingrese el tipo de fecha (por ejemplo, edat): ")

    retmax = input("Ingrese el n√∫mero m√°ximo de resultados (opcional, presione Enter para el valor predeterminado 20): ")
    if retmax:
        kwargs["retmax"] = retmax

    retmode = input("Ingrese el modo de retorno (json o xml, presione Enter para json): ")
    if retmode:
        kwargs["retmode"] = retmode

    results = esearch_agent.search(db, term, **kwargs)

    if "esearchresult" in results and results["esearchresult"]["count"] != "0":
        print(" Resultados encontrados:", results["esearchresult"]["count"])
        uids = results["esearchresult"].get("idlist", [])
        print("üÜî UIDs:", uids)

        if uids:
            if input("¬øDesea obtener los res√∫menes de los documentos? (s/n): ").lower() == "s":
                summary_results = esummary_agent.get_summary(db, ids=uids)
                try:
                    if db.lower() == "pubmed":
                        print_summary(summary_results)
                    else:
                        print(json.dumps(summary_results, indent=4))
                except Exception as e:
                    print(f"Error al procesar los res√∫menes: {e}")
                    print(json.dumps(summary_results, indent=4)) #Imprime el json en crudo para poder ver que esta devolviendo la API.
            else:
                print("Res√∫menes no solicitados.")
        else:
            print("No se encontraron UIDs para obtener res√∫menes.")

    else:
        print("‚ùå No se encontraron resultados.")
