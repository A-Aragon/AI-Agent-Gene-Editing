import requests

def get_gene_info(symbol):
    url = "https://genomecrispr.dkfz.de/api/genes"
    headers = {"Content-Type": "application/json"}
    data = {"query": symbol, "field": "symbol"}

    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 200:
        gene_data = response.json()
        pubmed_ids = gene_data.get("pubmed", [])
        gene_data["pubmed_ids"] = pubmed_ids
        return gene_data
    else:
        return None

def get_sgrnas(symbol):
    url = "https://genomecrispr.dkfz.de/api/sgrnas/symbol"
    headers = {"Content-Type": "application/json"}
    data = {"query": symbol}

    response = requests.post(url, headers=headers, json=data)
    return response.json() if response.status_code == 200 else None

def get_screening_experiments(pubmed_ids):
    url = "https://genomecrispr.dkfz.de/api/experiments"
    headers = {"Content-Type": "application/json"}
    data = {"pubmed": {"$in": pubmed_ids}}

    response = requests.post(url, headers=headers, json=data)
    return response.json() if response.status_code == 200 else None

def display_gene_info(gene_data):
    if not gene_data:
        print("No se encontr√≥ informaci√≥n del gen.")
        return

    print("\n=== Informaci√≥n del Gen ===")
    print(f" S√≠mbolo: {gene_data.get('symbol', 'N/A')}")
    print(f" ID Ensembl: {gene_data.get('ensg', 'N/A')}")
    print(f" Cromosoma: {gene_data.get('chr', 'N/A')} (Strand: {gene_data.get('strand', 'N/A')})")
    print(f" Posici√≥n inicio - fin: {gene_data.get('start', 'N/A')} - {gene_data.get('end', 'N/A')}")
    print("\n Secuencia (primeros 100 nucle√≥tidos):")
    print(gene_data.get("seq", "N/A")[:100] + "...")

    print("\n=== Transcripciones ===")
    for transcript in gene_data.get("transcripts", []):
        print(f" ID: {transcript.get('id', 'N/A')}")
        for exon in transcript.get("exons", []):
            print(f"  - Ex√≥n {exon.get('id', 'N/A')}: {exon.get('start', 'N/A')} - {exon.get('end', 'N/A')}")
        print("")
        
def display_sgrnas(sgrna_data):
    """Muestra informaci√≥n resumida de sgRNAs con opci√≥n de ver m√°s tras los primeros 50."""
    if not sgrna_data:
        print("\nNo se encontraron sgRNAs para este gen.")
        return

    def print_sgrnas(data_slice):
        print("\n=== sgRNAs Relacionados ===")
        print(f"{'sgRNA Name':<15} | {'Ensembl ID':<18} | {'Score':<10} | {'Cell Line':<12} | {'':<10} | {'Screen Type':<20} | {'Condition':<12} | {'Strand':<6} | {'Cas':<8} | {'Effect'}")
        print("-" * 130)

        for sgrna in data_slice:
            name = sgrna.get("name", "N/A")
            ensg = sgrna.get("ensg", "N/A")
            score = f"{sgrna.get('score', 'N/A'):.5f}" if isinstance(sgrna.get('score'), float) else sgrna.get('score', 'N/A')
            cellline = sgrna.get("cellline", "N/A")
            hit = sgrna.get("hit", "N/A")
            screentype = sgrna.get("screentype", "N/A")
            condition = sgrna.get("condition", "N/A")
            strand = sgrna.get("strand", "N/A")
            cas = sgrna.get("cas", "N/A")
            effect = sgrna.get("effect", "N/A")

            print(f"{name:<15} | {ensg:<18} | {score:<10} | {cellline:<12} | {hit:<10} | {screentype:<20} | {condition:<12} | {strand:<6} | {cas:<8} | {effect}")

    pubmed_ids = []

    # Mostrar primeros 50
    first_50 = sgrna_data[:50]
    print_sgrnas(first_50)

    # Guardar los PubMed IDs de los primeros 50
    for sgrna in first_50:
        pubmed = sgrna.get("pubmed", "N/A")
        if pubmed != "N/A":
            pubmed_ids.append(pubmed)

    # Si hay m√°s, preguntar si quiere ver el resto
    if len(sgrna_data) > 50:
        show_rest = input(f"\n¬øDeseas ver los {len(sgrna_data) - 50} sgRNAs restantes? (s/n): ").strip().lower()
        if show_rest == "s":
            remaining = sgrna_data[50:]
            print_sgrnas(remaining)
            for sgrna in remaining:
                pubmed = sgrna.get("pubmed", "N/A")
                if pubmed != "N/A":
                    pubmed_ids.append(pubmed)

    return pubmed_ids


def display_screening_experiments(experiments):
    if not experiments:
        print("\nNo se encontraron experimentos de screening.")
        return

    for exp in experiments:
        pubmed_id = exp.get('pubmed', 'N/A')
        title = exp.get('title', 'N/A')
        authors = ', '.join([' '.join(author) for author in exp.get('authors', [])])

        print(f"\n=== PubMed ID: {pubmed_id} ===")
        print(f" T√≠tulo: {title}")
        print(f" Autores: {authors}")

        print(f"\n{'Screen ID':<10} | {'Cell Line':<12} | {'Cas-9 Variant':<12} | {'Screen Type':<15} | {'Screen':<6} | {'Performance':<17} | {'Hit'}")
        print("-" * 100)

        for cell_line, details in exp.get("condition", {}).items():
            for condition, values in details.items():
                screen_id = values.get("screenid", "N/A")
                cas9_variant = values.get("cas9_variant", "N/A")
                screen_type = values.get("screen_type", "N/A")
                screen = values.get("screen", "N/A")
                max_fc = values.get("maxfc", "N/A")
                min_fc = values.get("minfc", "N/A")
                performance = f"{max_fc} / {min_fc}"
                hit = values.get("hit", "N/A")

                print(f"{screen_id:<10} | {cell_line:<12} | {cas9_variant:<12} | {screen_type:<15} | {screen:<6} | {performance:<17} | {hit}")

        print("=" * 100)

# Bucle interactivo principal
while True:
    print("\n=== GenomeCRISPR Tool ===")
    print("1. Consultar informaci√≥n sobre el gen")
    print("2. Obtener sgRNAs del gen (m√°x. 50)")
    print("3. Obtener experimentos de screening CRISPR por PubMed IDs de sgRNAs")
    print("4. Salir")
    
    choice = input("Selecciona una opci√≥n (1/2/3/4): ").strip()

    if choice == "4":
        print("üëã Saliendo del programa.")
        break

    symbol = input("Introduce el s√≠mbolo del gen (e.g., POLR2A): ").strip().upper()

    if choice == "1":
        gene_data = get_gene_info(symbol)
        display_gene_info(gene_data)

        if gene_data and gene_data.get("pubmed_ids"):
            print("\n=== PubMed IDs (Gene Info) ===")
            for pubmed_id in gene_data["pubmed_ids"]:
                print(pubmed_id)

    elif choice == "2":
        sgrna_data = get_sgrnas(symbol)
        display_sgrnas(sgrna_data)

    elif choice == "3":
        sgrna_data = get_sgrnas(symbol)
        sgrna_pubmed_ids = display_sgrnas(sgrna_data)

        unique_pubmed_ids = sorted(list(set(sgrna_pubmed_ids)), key=int)

        if unique_pubmed_ids:
            print("\n=== PubMed IDs (sgRNAs) Ordenados ===")
            print(unique_pubmed_ids)

            experiments = get_screening_experiments(unique_pubmed_ids)
            display_screening_experiments(experiments)
        else:
            print("\n‚ö†Ô∏è No se encontraron PubMed IDs para buscar experimentos.")
    else:
        print("‚ùå Opci√≥n no v√°lida.")

