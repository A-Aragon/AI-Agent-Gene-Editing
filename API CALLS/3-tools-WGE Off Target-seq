import json
import os
import requests
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ----------------------------
# API CALL 1 - Off-targets by sequence
# ----------------------------
def get_off_targets(species, sequence, pam_right):
    url = "https://wge.stemcell.sanger.ac.uk/api/off_targets_by_seq"
    params = {
        "species": species,
        "seq": sequence,
        "pam_right": str(pam_right).lower()  # Convertir pam_right a 'true'/'false'
    }

    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print("Error:", response.status_code, response.text)
        return None

# ----------------------------
# API CALL 2 - Off-targets details by CRISPR ID
# ----------------------------
def get_crispr_off_targets_by_id(species, crispr_id):
    url = "https://wge.stemcell.sanger.ac.uk/api/crispr_off_targets"
    data = {
        "species": species,
        "id": crispr_id,
        "with_detail": 1
    }

    headers = {
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
        "X-Requested-With": "XMLHttpRequest"
    }

    response = requests.post(url, data=data, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print("Error:", response.status_code, response.text)
        return None

# ----------------------------
# TOOLS
# ----------------------------
tools = [
    {
        "type": "function",
        "function": {
            "name": "get_off_targets",
            "description": "Recupera off-targets para una secuencia CRISPR y especie usando la API de WGE.",
            "parameters": {
                "type": "object",
                "properties": {
                    "species": {"type": "string"},
                    "sequence": {"type": "string", "description": "20bp CRISPR sequence"},
                    "pam_right": {"type": "boolean", "description": "True si el PAM está a la derecha, False en caso contrario."}
                },
                "required": ["species", "sequence", "pam_right"],
                "additionalProperties": False
            },
            "strict": True
        }
    },
    {
        "type": "function",
        "function": {
            "name": "get_crispr_off_targets_by_id",
            "description": "Consulta por ID un sitio CRISPR y retorna su resumen y sitios off-target.",
            "parameters": {
                "type": "object",
                "properties": {
                    "species": {"type": "string"},
                    "crispr_id": {"type": "string", "description": "ID del sitio CRISPR"}
                },
                "required": ["species", "crispr_id"],
                "additionalProperties": False
            },
            "strict": True
        }
    }
]

system_prompt = "Eres un asistente que ayuda a encontrar off-targets para secuencias CRISPR o IDs de CRISPR."

# ----------------------------
# INPUT DEL USUARIO
# ----------------------------
user_input = input("Pregunta (e.g., Off-targets for sequence or CRISPR ID): ")

if "id" in user_input.lower():
    crispr_id = input("Introduce el CRISPR ID (ej. 356224): ")
    species = input("Especie (Human o Mouse): ")
    species = "grch38" if species.lower() == "human" else "grcm38"  # Ajuste automático de especie
    selected_function = "get_crispr_off_targets_by_id"
    arguments = {
        "species": species,
        "crispr_id": crispr_id
    }
else:
    sequence = input("Introduce la secuencia CRISPR de 20bp: ")
    species = input("Especie (Human o Mouse): ")
    species = "grch38" if species.lower() == "human" else "grcm38"  # Ajuste automático de especie
    pam_right_input = input("¿El PAM está a la derecha? (sí/no): ").strip().lower()
    pam_right = pam_right_input in ["sí", "si", "yes", "y", "true"]
    selected_function = "get_off_targets"
    arguments = {
        "species": species,
        "sequence": sequence,
        "pam_right": pam_right
    }

# ----------------------------
# LLAMADA AL MODELO (registro)
# ----------------------------
messages = [
    {"role": "system", "content": system_prompt},
    {"role": "user", "content": user_input},
]

completion = client.chat.completions.create(
    model="gpt-4o",
    messages=messages,
    tools=tools,
)

print("\nGPT decidió usar:")
print("Función:", selected_function)
print("Argumentos:", arguments)

# ----------------------------
# LLAMADA A LA FUNCIÓN REAL
# ----------------------------
def call_function(name, args):
    args["species"] = args["species"].capitalize()
    if name == "get_off_targets":
        return get_off_targets(**args)
    elif name == "get_crispr_off_targets_by_id":
        return get_crispr_off_targets_by_id(**args)

result = call_function(selected_function, arguments)

print("\nRESULTADO:")
print(json.dumps(result, indent=2))

# ----------------------------
# LÓGICA ADICIONAL: preguntar si quiere ver detalles del ID devuelto
# ----------------------------
if selected_function == "get_off_targets" and result and "id" in result:
    view_details = input(f"\n¿Quieres ver el resumen detallado del ID {result['id']}? (sí/no): ").strip().lower()
    if view_details in ["sí", "si", "yes", "y"]:
        print(f"\nBuscando detalles para ID {result['id']}...\n")
        detailed_result = get_crispr_off_targets_by_id(species.capitalize(), result["id"])
        if detailed_result:
            print("RESUMEN DETALLADO:")
            print(json.dumps(detailed_result, indent=2))

            if not detailed_result[str(result["id"])]["off_target_details"]:
                print("\n⚠️ Aviso: No hay detalles de off-targets registrados para este ID.")
        else:
            print("❌ Error al obtener el resumen detallado.")
    else:
        print("Resumen detallado omitido.")




