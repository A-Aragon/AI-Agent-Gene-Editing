import requests
import json

def run_crisprcastyper(acc, prodigalMode="single"):
    """Llama a la API de CRISPRCasTyper con el accession number proporcionado y devuelve la respuesta."""
    url = "https://crisprcastyper.crispr.dk/api/v1/jobs"
    payload = {
        "spec": "cctyper",
        "name": "default",
        "inputs": {
            "inputFile": [],
            "acc": acc,
            "prodigalMode": prodigalMode,
        }
    }
    headers = {"Content-Type": "application/json"}
    response = requests.post(url, json=payload, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error al iniciar el trabajo: {response.status_code} - {response.text}")
        return None

def get_crisprcastyper_outputs(job_id):
    """Obtiene los outputs del trabajo usando el job_id y los muestra en formato legible."""
    url = f"https://crisprcastyper.crispr.dk/api/v1/jobs/{job_id}/outputs"
    response = requests.get(url)

    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error al obtener los outputs: {response.status_code} - {response.text}")
        return None

def download_file(file_url):
    """Descarga un archivo desde la URL proporcionada."""
    base_url = "https://crisprcastyper.crispr.dk"
    file_url = base_url + file_url
    response = requests.get(file_url)
    
    if response.status_code == 200:
        return response.text
    else:
        print(f"Error al descargar el archivo: {response.status_code}")
        return None

# Obtener el accession number del usuario
accession_number = input("Ingresa el accession number (ej. NC_017459): ")

# Llamada inicial a la API para iniciar el trabajo
initial_result = run_crisprcastyper(accession_number)

if initial_result and "id" in initial_result:
    job_id = initial_result["id"]
    print(f"\nTrabajo iniciado con Job ID: {job_id}")

    # Cambiar el job_id por el que queremos usar (ej. 8le3uohgzl)
    job_id_to_use = "8le3uohgzl"  # Sustituir por el job_id que desees

    # Llamada a la API para obtener los outputs con el nuevo job_id
    final_result = get_crisprcastyper_outputs(job_id_to_use)

    if final_result and "entries" in final_result:
        print("\nOutputs obtenidos:")
        
        for entry in final_result["entries"]:
            print(f"\nNombre: {entry['name']}")
            print(f"Descripción: {entry['description']}")
            print(f"Tamaño: {entry['sizeInBytes']} bytes")
            print(f"Tipo MIME: {entry['mimeType']}")
            print(f"URL de descarga: {entry['href']}")
            
            # Si es una tabla en formato .tab, intentar descargarla
            if entry['mimeType'] == "text/html":
                content = download_file(entry['href'])
                if content:
                    print(f"\nContenido del archivo {entry['name']}:\n{content}")
            print("="*50)

    else:
        print("No se pudieron obtener los outputs.")
else:
    print("No se pudo iniciar el trabajo.")




