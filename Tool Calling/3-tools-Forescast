import json
import os
import re
import requests
from openai import OpenAI
from pydantic import BaseModel, Field

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ----------------------------
# Funci√≥n que llama a la API de Elixir Forecast
# ----------------------------
def get_forecast_predictions(target, pam_position):
    url = "https://elixir.ut.ee/forecast/api/predict"
    payload = {"target": target, "pam_position": pam_position}
    headers = {"Content-Type": "application/json"}
    
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print("Error:", response.status_code, response.text)
        return None

# ----------------------------
# Definici√≥n de herramienta
# ----------------------------
tools = [
    {
        "type": "function",
        "function": {
            "name": "get_forecast_predictions",
            "description": "Recupera predicciones de la API de Elixir Forecast para una secuencia CRISPR.",
            "parameters": {
                "type": "object",
                "properties": {
                    "target": {"type": "string", "description": "Secuencia CRISPR completa."},
                    "pam_position": {"type": "integer", "description": "Posici√≥n del PAM en la secuencia."}
                },
                "required": ["target", "pam_position"],
                "additionalProperties": False
            },
            "strict": True
        }
    }
]

system_prompt = "Eres un asistente que ayuda a obtener predicciones de edici√≥n para secuencias CRISPR usando la API de Elixir Forecast."

# ----------------------------
# Input del usuario
# ----------------------------
target_input = input("Introduce la secuencia CRISPR objetivo: ")
pam_position_input = int(input("Introduce la posici√≥n del PAM: "))

formatted_input = f"Target: {target_input}. PAM position: {pam_position_input}"

messages = [
    {"role": "system", "content": system_prompt},
    {"role": "user", "content": formatted_input},
]

# ----------------------------
# Llamada al modelo
# ----------------------------
completion = client.chat.completions.create(
    model="gpt-4o",
    messages=messages,
    tools=tools,
)

print("\nGPT decidi√≥ llamar a:")
print("Funci√≥n:", completion.choices[0].message.tool_calls[0].function.name)
print("Argumentos:", json.loads(completion.choices[0].message.tool_calls[0].function.arguments))

# ----------------------------
# Ejecutar funci√≥n real
# ----------------------------
def call_function(name, args):
    if name == "get_forecast_predictions":
        return get_forecast_predictions(**args)

for tool_call in completion.choices[0].message.tool_calls:
    name = tool_call.function.name
    args = json.loads(tool_call.function.arguments)
    messages.append(completion.choices[0].message)

    result = call_function(name, args)
    messages.append({
        "role": "tool",
        "tool_call_id": tool_call.id,
        "content": json.dumps(result)
    })

# ----------------------------
# Esquema de respuesta
# ----------------------------
class ForecastResponse(BaseModel):
    mutation: str = Field(description="Tipo de mutaci√≥n detectada")
    inserted_sequence: str = Field(description="Secuencia insertada en la mutaci√≥n, si aplica")
    prediction_score: float = Field(description="Probabilidad de la mutaci√≥n")

class ForecastsResponse(BaseModel):
    forecasts: list = Field(..., description="Lista de todas las predicciones")

# ----------------------------
# Parsear predicciones
# ----------------------------
def parse_all_predictions(response_data):
    forecasts = []
    if "data" in response_data and "data" in response_data["data"]:
        for row in response_data["data"]["data"].split("\n")[1:]:
            mutation_data = row.split(",")
            if len(mutation_data) >= 4:
                mutation = mutation_data[1]
                inserted_sequence = mutation_data[2] if mutation_data[2] != "" else "No insertada"
                try:
                    prediction_score = float(mutation_data[3])
                except ValueError:
                    continue
                forecasts.append({
                    "mutation": mutation,
                    "inserted_sequence": inserted_sequence,
                    "prediction_score": prediction_score
                })
    return ForecastsResponse(forecasts=forecasts)

# ----------------------------
# Obtener predicciones con mayor score
# ----------------------------
def get_top_predictions(forecasts, top_n=10):
    sorted_forecasts = sorted(forecasts, key=lambda x: x['prediction_score'], reverse=True)
    return sorted_forecasts[:top_n]

# ----------------------------
# Clasificar tipo de mutaci√≥n
# ----------------------------

def classify_mutation_type(mutation):
    # Inserciones
    if mutation.startswith("I"):
        size_match = re.match(r"I(\d+)", mutation)
        if size_match:
            size = int(size_match.group(1))
            return "Inserci√≥n (1 bp)" if size == 1 else "Inserci√≥n (>1 bp)"
        return "Inserci√≥n"

    # Deleciones
    if mutation.startswith("D"):
        size_match = re.match(r"D(\d+)", mutation)
        size = int(size_match.group(1)) if size_match else 0

        # Clasificaci√≥n simple seg√∫n el tama√±o
        if size <= 2:
            return "Deleci√≥n (1-2 bp)"
        elif 3 <= size <= 9:
            return "Deleci√≥n (3-9 bp)"
        elif size > 9:
            return "Deleci√≥n (>9 bp)"
        
        return "Deleci√≥n"

    return "Otro tipo"


# ----------------------------
# Mostrar leyenda
# ----------------------------
def print_legend():
    print("\nLEYENDA DE RESULTADOS:")
    print(" - Mutation: Nombre identificador de la mutaci√≥n (ej. D5, I1)")
    print(" - Tipo de mutaci√≥n: Clasificaci√≥n basada en el tipo y tama√±o (ej. Deleci√≥n (3-9bp), Inserci√≥n (1bp))")
    print(" - Secuencia insertada: Nucle√≥tidos a√±adidos, si los hay")
    print(" - Score de predicci√≥n: Probabilidad asociada al evento mutacional")
    print("-" * 60)
    print("\n** Mensaje importante:** Las inserciones y deleciones pueden ocurrir de manera conjunta. El tipo de mutaci√≥n predominante es el que se menciona.")

# ----------------------------
# Mostrar resultados
# ----------------------------

for tool_call in completion.choices[0].message.tool_calls:
    name = tool_call.function.name
    args = json.loads(tool_call.function.arguments)
    messages.append(completion.choices[0].message)

    result = call_function(name, args)
    messages.append({
        "role": "tool",
        "tool_call_id": tool_call.id,
        "content": json.dumps(result)
    })

    # ‚úÖ Aqu√≠ parseamos el resultado y extraemos los top 10
    parsed_response = parse_all_predictions(result)
    top_predictions = get_top_predictions(parsed_response.forecasts, top_n=10)


print("\nTop 10 predicciones con mayor score:")
print("\nüß¨ Leyenda:")
print("- Inserci√≥n (1 bp): adici√≥n de un solo nucle√≥tido en el sitio de corte")
print("- Inserci√≥n (>1 bp): adici√≥n de m√∫ltiples nucle√≥tidos")
print("- Deleci√≥n corta: p√©rdida de 1-2 nucle√≥tidos")
print("- Deleci√≥n media: p√©rdida de 3-9 nucle√≥tidos")
print("- Deleci√≥n larga: p√©rdida de m√°s de 9 nucle√≥tidos")
print("\n** Mensaje importante:** Las inserciones y deleciones pueden ocurrir de manera conjunta. El tipo de mutaci√≥n predominante es el que se menciona.\n")

for i, forecast in enumerate(top_predictions, start=1):
    tipo = classify_mutation_type(forecast['mutation'])
    print(f"{i}. Mutaci√≥n: {forecast['mutation']}")
    print(f"   Tipo de mutaci√≥n: {tipo}")
    print(f"   Secuencia insertada: {forecast['inserted_sequence']}")
    print(f"   Score de predicci√≥n: {forecast['prediction_score']:.6f}")
    print("-" * 40)


