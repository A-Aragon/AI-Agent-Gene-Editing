import json
from langchain.chat_models import init_chat_model
from langchain_tavily import TavilySearch
from langgraph.graph import StateGraph, START, END
from langgraph.graph.message import add_messages
from langchain_core.messages import ToolMessage
from typing import Annotated, TypedDict
from dotenv import load_dotenv
import os

# Load the environment variables from the .env file
load_dotenv()

# Now, the API key should be available as an environment variable
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")

if TAVILY_API_KEY is None:
    raise ValueError("TAVILY_API_KEY environment variable not set.")


# Set up the TavilySearch tool (for web search)
tool = TavilySearch(max_results=2)
tools = [tool]

# Define State
class State(TypedDict):
    messages: Annotated[list, add_messages]

# Initialize LangGraph state graph
graph_builder = StateGraph(State)

# Initialize the chat model (this could be OpenAI, Anthropic, or other models)
llm = init_chat_model("openai:gpt-4")

# Modify LLM to bind tools
llm_with_tools = llm.bind_tools(tools)

# Define chatbot function to interact with the user
def chatbot(state: State):
    return {"messages": [llm_with_tools.invoke(state["messages"])]}

# Add chatbot node to the graph
graph_builder.add_node("chatbot", chatbot)

# Define a BasicToolNode that runs the tools requested in the last AIMessage
class BasicToolNode:
    """A node that runs the tools requested in the last AIMessage."""
    def __init__(self, tools: list) -> None:
        self.tools_by_name = {tool.name: tool for tool in tools}

    def __call__(self, inputs: dict):
        if messages := inputs.get("messages", []):
            message = messages[-1]
        else:
            raise ValueError("No message found in input")
        outputs = []
        for tool_call in message.tool_calls:
            tool_result = self.tools_by_name[tool_call["name"]].invoke(tool_call["args"])
            outputs.append(
                ToolMessage(
                    content=json.dumps(tool_result),
                    name=tool_call["name"],
                    tool_call_id=tool_call["id"],
                )
            )
        return {"messages": outputs}

# Add the BasicToolNode to the graph
tool_node = BasicToolNode(tools=[tool])
graph_builder.add_node("tools", tool_node)

# Define the router function for conditional edges
def route_tools(state: State):
    """Route to the ToolNode if the last message has tool calls, otherwise end."""
    if isinstance(state, list):
        ai_message = state[-1]
    elif messages := state.get("messages", []):
        ai_message = messages[-1]
    else:
        raise ValueError(f"No messages found in input state to tool_edge: {state}")
    if hasattr(ai_message, "tool_calls") and len(ai_message.tool_calls) > 0:
        return "tools"
    return END

# Add the conditional edges
graph_builder.add_conditional_edges(
    "chatbot",
    route_tools,
    {"tools": "tools", END: END},
)

# Add the edge from tools back to the chatbot
graph_builder.add_edge("tools", "chatbot")
graph_builder.add_edge(START, "chatbot")

# Compile the graph
graph = graph_builder.compile()

# Function to process user input and trigger the graph
def stream_graph_updates(user_input):
    # User sends a message to the agent
    state = {"messages": [{"role": "user", "content": user_input}]}

    # Run the graph
    result = graph.invoke(state)
    print(f"Assistant: {result['messages'][-1].content}") # Access content using .content

# Start the chatbot loop
while True:
    try:
        user_input = input("User: ")
        if user_input.lower() in ["quit", "exit", "q"]:
            print("Goodbye!")
            break
        
        # Send user input to the agent
        stream_graph_updates(user_input)

    except KeyboardInterrupt:
        print("\nGoodbye!")
        break

