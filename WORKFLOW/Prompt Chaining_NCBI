import json
import os
import requests
import urllib.parse
from openai import OpenAI

# ----------------------------
# Initialize OpenAI client
# ----------------------------
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ----------------------------
# Entrez API Functions
# ----------------------------

def esearch(db, term, **kwargs):
    base_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"
    params = {"db": db, "term": term, "retmode": "json", "retmax": 20, "retstart": 0, "usehistory": "y"}
    params.update(kwargs)
    clean_params = {k: v for k, v in params.items() if v is not None}
    full_url = f"{base_url}?{urllib.parse.urlencode(clean_params)}"
    try:
        response = requests.get(full_url)
        response.raise_for_status()
        data = response.json()
        if "esearchresult" not in data:
            raise ValueError("No esearchresult found.")
        return data
    except (requests.exceptions.RequestException, json.JSONDecodeError, ValueError) as e:
        raise Exception(f"ESearch error: {e}")

def esummary(db, ids, **kwargs):
    base_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi"
    params = {"db": db, "id": ",".join(ids), "retmode": "json"}
    params.update(kwargs)
    clean_params = {k: v for k, v in params.items() if v is not None}
    full_url = f"{base_url}?{urllib.parse.urlencode(clean_params)}"
    try:
        response = requests.get(full_url)
        response.raise_for_status()
        return response.json()
    except (requests.exceptions.RequestException, json.JSONDecodeError) as e:
        raise Exception(f"ESummary error: {e}")

# ----------------------------
# CRISPR API Functions
# ----------------------------

def get_crisprs_by_exon(species, exon_ids):
    url = "https://wge.stemcell.sanger.ac.uk/api/crispr_search"
    params = {"species": species.capitalize(), "exon_id[]": exon_ids}
    response = requests.get(url, params=params)
    return handle_response(response)

def get_off_targets(species, sequence, pam_right):
    url = "https://wge.stemcell.sanger.ac.uk/api/off_targets_by_seq"
    params = {"species": species, "seq": sequence, "pam_right": str(pam_right).lower()}
    response = requests.get(url, params=params)
    return handle_response(response)

def get_forecast_predictions(target, pam_position):
    url = "https://elixir.ut.ee/forecast/api/predict"
    payload = {"target": target, "pam_position": pam_position}
    headers = {"Content-Type": "application/json"}
    response = requests.post(url, json=payload, headers=headers)
    return handle_response(response)

def get_gene_info(symbol):
    url = "https://genomecrispr.dkfz.de/api/genes"
    headers = {"Content-Type": "application/json"}
    data = {"query": symbol, "field": "symbol"}
    response = requests.post(url, headers=headers, json=data)
    return handle_response(response)

def get_sgrnas(symbol):
    url = "https://genomecrispr.dkfz.de/api/sgrnas/symbol"
    headers = {"Content-Type": "application/json"}
    data = {"query": symbol}
    response = requests.post(url, headers=headers, json=data)
    return handle_response(response)

def get_screening_experiments(symbol):
    sgrna_data = get_sgrnas(symbol)
    if sgrna_data:
        sgrna_pubmed_ids = [item.get('pubmed') for item in sgrna_data if item.get('pubmed') != 'N/A']
        unique_pubmed_ids = sorted(list(set(sgrna_pubmed_ids)), key=int)
        url = "https://genomecrispr.dkfz.de/api/experiments"
        headers = {"Content-Type": "application/json"}
        data = {"pubmed": {"$in": unique_pubmed_ids}}
        response = requests.post(url, headers=headers, json=data)
        return handle_response(response)
    else:
        return None

def handle_response(response):
    if response.status_code != 200:
        print(f"Error {response.status_code}: {response.text}")
        return None
    try:
        result = response.json()
        if not result:
            print("No data returned.")
        return result
    except json.JSONDecodeError:
        print("Failed to decode JSON response:", response.text)
        return None

# ----------------------------
# Function Map
# ----------------------------
function_map = {
    "get_crisprs_by_exon": get_crisprs_by_exon,
    "get_off_targets": get_off_targets,
    "get_forecast_predictions": get_forecast_predictions,
    "get_gene_info": get_gene_info,
    "get_sgrnas": get_sgrnas,
    "get_screening_experiments": get_screening_experiments,
    "esearch": esearch,
    "esummary": esummary,
}

# ----------------------------
# Define OpenAI Tools
# ----------------------------
tools = [
    {"type": "function", "function": {
        "name": "get_crisprs_by_exon",
        "description": "Retrieve CRISPR guides for a species and list of exon IDs.",
        "parameters": {"type": "object", "properties": {"species": {"type": "string"}, "exon_ids": {"type": "array", "items": {"type": "string"}}}, "required": ["species", "exon_ids"]}
    }},
    {"type": "function", "function": {
        "name": "get_off_targets",
        "description": "Retrieve off-targets for a CRISPR sequence.",
        "parameters": {"type": "object", "properties": {"species": {"type": "string"}, "sequence": {"type": "string"}, "pam_right": {"type": "boolean"}}, "required": ["species", "sequence", "pam_right"]}
    }},
    {"type": "function", "function": {
        "name": "get_forecast_predictions",
        "description": "Retrieve CRISPR editing predictions using Elixir Forecast API.",
        "parameters": {"type": "object", "properties": {"target": {"type": "string"}, "pam_position": {"type": "integer"}}, "required": ["target", "pam_position"]}
    }},
    {"type": "function", "function": {
        "name": "get_gene_info",
        "description": "Retrieve gene information from GenomeCRISPR.",
        "parameters": {"type": "object", "properties": {"symbol": {"type": "string"}}, "required": ["symbol"]}
    }},
    {"type": "function", "function": {
        "name": "get_sgrnas",
        "description": "Retrieve sgRNAs associated with a gene from GenomeCRISPR.",
        "parameters": {"type": "object", "properties": {"symbol": {"type": "string"}}, "required": ["symbol"]}
    }},
    {"type": "function", "function": {
        "name": "get_screening_experiments",
        "description": "Retrieve CRISPR screening experiments based on a gene symbol.",
        "parameters": {"type": "object", "properties": {"symbol": {"type": "string"}}, "required": ["symbol"]}
    }},
    {"type": "function", "function": {
        "name": "esearch",
        "description": "Search the Entrez database.",
        "parameters": {"type": "object", "properties": {
            "db": {"type": "string"},
            "term": {"type": "string"},
            "kwargs": {"type": "object", "properties": {
                "retmax": {"type": "integer"},
                "retstart": {"type": "integer"},
                "reldate": {"type": "integer"},
                "datetype": {"type": "string"},
                "rettype": {"type": "string"},
                "sort": {"type": "string"}
            }}
        }, "required": ["db", "term"]}
    }},
    {"type": "function", "function": {
        "name": "esummary",
        "description": "Get summaries for documents in the Entrez database.",
        "parameters": {"type": "object", "properties": {
            "db": {"type": "string"},
            "ids": {"type": "array", "items": {"type": "string"}},
            "kwargs": {"type": "object", "properties": {
                "version": {"type": "string"}
            }}
        }, "required": ["db", "ids"]}
    }}
]

system_prompt = "You are an assistant that helps find CRISPR guides, off-targets, gene information, and search Entrez databases."

# ----------------------------
# User Interaction
# ----------------------------

user_input = input("Enter your request (e.g., 'gene info for POLR2A', 'guides for exon ENSMUSE00000106755', 'search pubmed for crispr', 'summarize pubmed ids 12345, 67890'): ")
messages = [{"role": "system", "content": system_prompt}, {"role": "user", "content": user_input}]

# ----------------------------
# Call OpenAI Model
# ----------------------------

completion = client.chat.completions.create(model="gpt-4o", messages=messages, tools=tools)

if completion.choices and completion.choices[0].message.tool_calls:
    tool_call = completion.choices[0].message.tool_calls[0]
    function_name = tool_call.function.name
    function_args = json.loads(tool_call.function.arguments)

    print("\nGPT decided to call:")
    print("Function:", function_name)
    print("Arguments:", function_args)

    # Call the corresponding function dynamically
    func = function_map.get(function_name)
    if func:
        # Handle kwargs for esearch and esummary
        if function_name in ["esearch", "esummary"] and "kwargs" in function_args and function_args["kwargs"]:
            result = func(function_args["db"], function_args["term"] if "term" in function_args else function_args["ids"], **function_args["kwargs"])
        elif function_name == "esummary":
            result = func(function_args["db"], function_args["ids"])
        else:
            result = func(**function_args)

        print("\nFunction Result:", json.dumps(result, indent=2) if result else "\nNo results returned.")
    else:
        print(f"Unknown function: {function_name}")
else:
    print("GPT did not decide to call any function.")